/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.kss.social;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.Placement;

import fi.foyt.foursquare.api.FoursquareApi;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="foursquare", schemaVersion="1.0-SNAPSHOT")
public class FoursquareConnector
{

	/**
	 * Configurable
	 */
	@Configurable
	@Placement(group = "Connection", tab = "General")
	private String AccessToken;


	/**
	 * Configurable
	 */
	@Configurable
	@Placement(group = "Connection", tab = "General")
	private String Client_ID;
	/**
	 * Set property
	 *
	 * @param Client_ID Client ID
	 */	
	public void setClient_ID(String Client_ID)
	{
		this.Client_ID = Client_ID;
	}

	/**
	 * Configurable
	 */
	@Configurable
	@Placement(group = "Connection", tab = "General")
	private String Client_Secret;
	/**
	 * Set property
	 *
	 * @param Client_Secret Client Secret
	 */	
	public void setClient_Secret(String Client_Secret)
	{
		this.Client_Secret = Client_Secret;
	}

	/**
	 * Configurable
	 */
	@Configurable
	@Placement(group = "Connection", tab = "General")
	private String Callback_URL;
	/**
	 * Set property
	 *
	 * @param Callback_URL Callback_URL
	 */	
	public void setCallback_URL(String Callback_URL)
	{
		this.Callback_URL = Callback_URL;
	}


	/**
	 * Connect
	 *
	 * @throws ConnectionException
	 */
	@Connect
	public void connect()
			throws ConnectionException {
		/*
		 * CODE FOR ESTABLISHING A CONNECTION GOES IN HERE
		 */

	}

	/**
	 * Disconnect
	 */
	@Disconnect
	public void disconnect() {
		/*
		 * CODE FOR CLOSING A CONNECTION GOES IN HERE
		 */
	}

	/**
	 * Are we connected
	 */
	@ValidateConnection
	public boolean isConnected() {
		return true;
	}

	/**
	 * Are we connected
	 */
	@ConnectionIdentifier
	public String connectionId() {
		return "001";
	}


	/**
	 * 
	 * @return
	 */
	public String getAccessToken() {
		return AccessToken;
	}
	/**
	 * 
	 * @param accessToken
	 */
	public void setAccessToken(String accessToken) {
		AccessToken = accessToken;
	}


	/**
	 * Custom Code which will access the public 4Square API
	 * and return the Json
	 * The authtoken is received from the configuration file, including the Longitude, Latitude and Query parameters
	 *
	 * @param lat String
	 * @param lng String
	 * @param query String
	 * @return Json results from 4square string
	 */ 
	@Processor
	public String searchVenues(String lat,String lng, String query )
	{
		//  This is to make sure we can echo the input received
		System.out.println(lat+"\t"+lng+"\t"+query);

		String httpsURL = "https://api.foursquare.com/v2/venues/search?ll="+lat+","+lng+"&oauth_token="+AccessToken+"&v=20150319&query="+query;
		StringBuffer sb = new StringBuffer();
		try {
			URL myurl = new URL(httpsURL);
			HttpsURLConnection con = (HttpsURLConnection)myurl.openConnection();
			InputStream ins = con.getInputStream();
			InputStreamReader isr = new InputStreamReader(ins);
			BufferedReader in = new BufferedReader(isr);

			String inputLine;

			while ((inputLine = in.readLine()) != null)
			{
				sb.append(inputLine);
				System.out.println(inputLine);
			}

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return sb.toString(); 
	}
	/**
	 * There was no need for this, since Venue search from 4Square can be accessed with Just Auth Token 
	 * @param request
	 * @param response
	 */
	public void authenticationRequest(HttpServletRequest request, HttpServletResponse response) {
		FoursquareApi foursquareApi = new FoursquareApi(this.Client_ID, this.Client_Secret, this.Callback_URL);
		try {
			// First we need to redirect our user to authentication page. 
			response.sendRedirect(foursquareApi.getAuthenticationUrl());
		} catch (IOException e) {
			// TODO: Error handling
		}
	}
}
